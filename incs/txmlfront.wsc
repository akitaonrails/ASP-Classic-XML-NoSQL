<?xml version="1.0" encoding="iso-8859-1"?>
<component>

<registration 
	progid="PSNXML.TXMLFront" 
	description="Easiest way to manipulate XML files generated by the TXMLSynchro"
	version="1.1.0.0"
	/>

<public>
	<property name="Root">
		<get internalName="Get_Root"/>
		<put internalName="Set_Root"/>
	</property>

	<property name="XMLSource">
		<put internalName="Set_XMLSource"/>
	</property>

	<property name="XSLSource">
		<put internalName="Set_XSLSource"/>
	</property>

	<property name="LanguageID">
		<get internalName="Get_LanguageID"/>
		<put internalName="Set_LanguageID"/>
	</property>
	
	<property name="XMLFile">
		<get internalName="Get_XMLFile"/>
		<put internalName="Set_XMLFile"/>
	</property>

	<property name="XSLFile">
		<get internalName="Get_XSLFile"/>
		<put internalName="Set_XSLFile"/>
	</property>

	<property name="XML">
		<get internalName="Get_XML" />
	</property>

	<property name="XSL">
		<get internalName="Get_XSL" />
	</property>
	
	<property name="Oracle">
		<put internalName="Set_Oracle"/>
	</property>

	<property name="ActiveConnection">
		<put internalName="Set_ActiveConnection"/>
	</property>
	
	<property name="ActiveTranslation">
		<put internalName="Set_ActiveTranslation"/>
	</property>
	
	<method name="Load">
		<parameter name="sLabel" />
	</method>

	<method name="AddReplacer">
		<parameter name="sIni" />
		<parameter name="sEnd" />
	</method>

	<method name="SetTranslation">
		<parameter name="sSource" />
		<parameter name="sDest" />
		<parameter name="sListCategory" />
	</method>

	<method name="Render">
		<parameter name="oResponse" />
	</method>
	
	<method name="ListEvents">
		<parameter name="sRootLabel" />
		<parameter name="sLabel" />
	</method>
	
	<method name="ListEventPages">
		<parameter name="sRootLabel" />
		<parameter name="sEventLabel" />
	</method>
	
	<method name="LoadEventPage">
		<parameter name="sRootLabel" />
		<parameter name="sEventLabel" />
		<parameter name="sPageLabel" />
	</method>
	
</public>


<implements type="ASP" />
<script language="VBScript">
<![CDATA[   

' ---
' Package TXML
'
' TXMLFront Class
' shortcur loader for TXMLSynchro created XML/XSL files
'
'	- internally creates MSXML.DomDocument instances
'	- this class doesn´t throw up nor raise any exception, all errors are returned
'	as boolean of function results
'
' Examples:
'		Load( 'shortcut' )
'		Render( Response )
'	or
'		ListEvents( 'br', 'Soccer' )
'		ListEventPages( 'br', 'Calcio' )
'		LoadEventPage( 'br', 'Calcio', 'results')
'		Render( Response )
'
' akita@psntv.com
' 04/23/2001
'
' 07/10/2001 - Transformation from VB Class to WSC Component
' 08/08/2001 - Added support for Template generated Events
' 08/09/2001 - Added support for translation (TXMLTranslation component)
' ---

Dim sRoot
Dim oXML
Dim oXSL
Dim oConn
Dim oTranslate
Dim iLanguageID
	
Dim aReplaceIni()
Dim aReplaceEnd()
Dim intReplace
	
Dim sXMLFile
Dim sXSLFile
	
' sql settings
Dim isOracle
Dim sql_QueryShortcutXML
Dim sql_QueryShortcutXSL
Dim qQueryEventList, qQueryEventPages, qQueryPageFiles

' translation settings
Dim cfgSource, cfgDest, cfgListCategory
	
' set the root folder
Sub Set_Root( sTmp )
	sRoot = sTmp
	If Right( sRoot, 1 ) <> "\" Then
		sRoot = sRoot & "\"
	End If
End Sub
	
Function Get_Root
	Get_Root = sRoot
End Function

Function Get_XML
	Set Get_XML = oXML
End Function

Function Get_XSL
	Set Get_XSL = oXSL
End Function

' externally fill in the XML data
Sub Set_XMLSource( ByRef sSource )
	If Not IsNull( oXML ) Then
		If InStr( sSource, ":\" ) and Not InStr( sSource, vbCRLF ) Then
			' looks like a path so load the file
			oXML.load( sSource )
		Else
			' load the direct XML source
			oXML.loadXML( sSource )
		End If
	End If
End Sub
	
' externally fill in the XSL data
Sub Set_XSLSource( ByRef sSource )
	If Not IsNull( oXSL ) Then
		If InStr( sSource, ":\" ) and Not InStr( sSource, vbCRLF ) Then
			' looks like a path so load the file
			oXSL.load( sSource )
		Else
			' load the direct XSL source
			oXSL.loadXML( sSource )
		End If
	End If
End Sub

' set the current language ID
Sub Set_LanguageID( ByVal iLanguage )
	If IsNumeric( iLanguage ) Then
		iLanguageID = iLanguage
	End If
End Sub
	
Function Get_LanguageID
	Get_LanguageID = iLanguage
End Function
	
Function Get_XMLFile
	Get_XMLFile = sXMLFile
End Function

Sub Set_XMLFile( sFile )
	on error resume next
	Call oXML.load( Server.MapPath( sFile ) )
	on error goto 0
End Sub
	
Function Get_XSLFile
	Get_XSLFile = sXSLFile
End Function

Sub Set_XSLFile( sFile )
	on error resume next
	Call oXSL.load( Server.MapPath( sFile ) )
	on error goto 0
End Sub

' set the current sql queries
Sub Set_Oracle( ByVal bOracle )
	If bOracle Then
		isOracle = True
	Else
		isOracle = False
	End If
	Call DefineQueries()
End Sub

' connect to externally created filesystem and database objects
Sub Set_ActiveConnection( ByRef oDB )
	Set oConn = oDB
End Sub

' connect to an external translation 
Sub Set_ActiveTranslation ( ByRef oTrans )
	Set oTranslate = oTrans
End Sub

Sub SetTranslation( sSource, sDest, sListCategory ) 
	cfgSource = sSource
	cfgDest = sDest
	cfgListCategory = sListCategory
End Sub

' load the files thru a previously created shortcut association
Function Load( sLabel )
	Dim sSQL, sTmp
	Dim oRS
	Load = True
		
	' -- get the XML
	sTmp = ""
	sSQL = Replace( sql_QueryShortcutXML, "%language_id%", iLanguageID )
	sSQL = Replace( sSQL, "%label%", sLabel )

	Set oRS = oConn.Execute( sSQL )
	If Not oRS.EOF Then
		sTmp = sRoot & oRS( "path" ) & oRS( "filename" )
		If Len( oRS( "type" ) ) > 0 Then
			 sTmp = sTmp & "." & oRS( "type" )
		End If
		on error resume next
		' try {
			oXML.load( sTmp )
			sXMLFile = sTmp
		on error goto 0
		' } catch( Err ) {
			Load = ( Load and ( Err.number = 0 ) )
		' }
		oRS.Close
	End If

	' -- get the XSL
	sTmp = ""
	sSQL = Replace( sql_QueryShortcutXSL, "%language_id%", iLanguageID )
	sSQL = Replace( sSQL, "%label%", sLabel )

	Set oRS = oConn.Execute( sSQL )
	If Not oRS.EOF Then
		sTmp = sRoot & oRS( "path" ) & oRS( "filename" )
		If Len( oRS( "type" ) ) > 0 Then
			 sTmp = sTmp & "." & oRS( "type" )
		End If
		on error resume next
		' try {
			oXSL.load( sTmp )
			sXSLFile = sTmp
		on error goto 0
		' } catch( Err ) {
			Load = ( Load and ( Err.number = 0 ) )
		' }
		oRS.Close
	End If		
		
	' clean up
	Set oRS = Nothing
End Function
	
' add replacers to change manually the results HTML (this is dangerous and must be used carefully)
Sub AddReplacer( sIni, sEnd )
	intReplace = intReplace + 1
	ReDim Preserve aReplaceIni( intReplace )
	ReDim Preserve aReplaceEnd( intReplace )
	aReplaceIni( intReplace ) = sIni
	aReplaceEnd( intReplace ) = sEnd
End Sub
	
' render the XML and XSL files
Sub Render( ByRef oResponse )
	Dim sFinal
	on error resume next
	If intReplace > 0 Then
		sFinal = oXML.transformNode( oXSL )
		For intCount = 0 To intReplace
			sFinal = Replace( sFinal, aReplaceIni( intCount ), aReplaceEnd( intCount ), 1, -1 )
		Next
		If Not IsEmpty( cfgSource ) and Not IsEmpty( cfgDest ) and Not IsEmpty( cfgListCategory ) and Not IsNull( oTranslate ) Then
			Call oTranslate.Translate( cfgSource, cfgDest, cfgListCategory, sFinal )
		End If
		oResponse.Write sFinal
	Else
		oXML.transformNodeToObject oXSL, oResponse
	End If
	
	If Err.number <> 0 Then
		Response.Write vbCRLF & "<!-- Rendering Error: " & Err.description & " -->" & vbCRLF
	End If
	on error goto 0
End Sub

' --- TXMLEvents front-end wrapper - INI

' returns a list of events related to a category in xml format
Sub ListEvents( sRootLabel, sLabel )
	If IsEmpty( sRootLabel ) or IsEmpty( sLabel ) Then
		Exit Sub
	End If
	
	Dim sSQL, sReturn
	sSQL = Replace( qQueryEventList, "%root_name", sRootLabel )
	sSQL = Replace( sSQL, "%label", sLabel )

	on error resume next
	Set oRS = oConn.Execute( sSQL )
	sReturn = ""
	If Err.number = 0 and oConn.Errors.Count = 0 Then
		While Not oRS.EOF
			sReturn = sReturn & _
			"<item>" & vbCRLF & _
			"	<id>" & oRS( "id" ) & "</id>" & vbCRLF & _
			"	<label>" & oRS( "label" ) & "</label>" & vbCRLF & _
			"	<root_id>" & oRS( "root_id" ) & "</root_id>" & vbCRLF & _
			"</item>" & vbCRLF
			oRS.MoveNext
		Wend
		If sReturn <> "" Then
			sReturn = "<list>" & vbCRLF & sReturn & "</list>"
		End If
	End If
	Set oRS = Nothing
	
	oXML.loadXML( sReturn )
End Sub

' returns a list of pages related to an event in xml format
Sub ListEventPages( sRootLabel, sEventLabel )
	If IsEmpty( sRootLabel ) or IsEmpty( sEventLabel ) Then
		Exit Sub
	End If

	Dim sSQL, sReturn
	sSQL = Replace( qQueryEventPages, "%root_name", sRootLabel )
	sSQL = Replace( sSQL, "%label", sEventLabel )

	on error resume next
	Set oRS = oConn.Execute( sSQL )
	sReturn = ""
	If Err.number = 0 and oConn.Errors.Count = 0 Then
		While Not oRS.EOF
			sReturn = sReturn & _
			"<item>" & vbCRLF & _
			"	<id>" & oRS( "id" ) & "</id>" & vbCRLF & _
			"	<label>" & oRS( "label" ) & "</label>" & vbCRLF & _
			"	<event_id>" & oRS( "event_id" ) & "</event_id>" & vbCRLF & _
			"</item>" & vbCRLF
			oRS.MoveNext
		Wend
		If sReturn <> "" Then
			sReturn = "<list>" & vbCRLF & sReturn & "</list>"
		End If
	End If
	Set oRS = Nothing
	
	oXML.loadXML( sReturn )
	on error goto 0
End Sub

' load a page to be rendered
Sub LoadEventPage( sRootLabel, sEventLabel, sPageLabel )
	' reset xml buffers
	on error resume next
	oXML.loadXML( "" )
	oXSL.loadXML( "" )
	on error goto 0
	
	If IsEmpty( sRootLabel ) or IsEmpty( sEventLabel ) or IsEmpty( sPageLabel ) Then
		Exit Sub
	End If
	
	Dim sSQL
	sSQL = Replace( qQueryPageFiles, "%root_name", sRootLabel )
	sSQL = Replace( sSQL, "%token", sPageLabel )
	sSQL = Replace( sSQL, "%event_label", sEventLabel )

	Set oRS = oConn.Execute( sSQL )
	sReturn = ""
	If Not oRS.EOF Then
		Dim sXML, sXSL
		sXML = oRS( "xml" )
		sXSL = oRS( "xsl" )
		on error resume next
		Call oXML.load( sXML )
		Call oXSL.load( sXSL )
		If Err.number <> 0 Then
			Response.Write vbCRLF & "<!-- LoadEventPage " & vbCRLF
			Response.Write sXML & vbCRLF
			Response.Write sXSL & vbCRLF
			Response.Write " -->"
		End If
		on error goto 0
	End If
	Set oRS = Nothing
	
	' call Render after this
End Sub

' --- TXMLEvents front-end wrapper - END

' set the sql queries
Sub DefineQueries
	If IsOracle Then
		qQueryEventList = "select b.id, b.label, c.root_id " & _
			" from tbXML_EventsList a, tbXML_Events b, tbXML_folders c " & _
			" where a.root_id = c.folder_id " & _
			" and c.root_id is null " & _
			" and substr( c.path, length( c.path ) - length( '%root_name' ), length( '%root_name' ) ) in ( '%root_name', '%root_name' || '\' ) " & _
			" and a.event_id = b.id " & _
			" and a.label = '%label' " & _
			" and b.is_active = 1 " & _
			" order by b.label " 

		qQueryEventPages = "select a.id, a.event_id, a.label " & _
			" from tbXML_EventPages a, tbXML_Events b, tbXML_folders c " & _
			" where a.event_id = b.id " & _
			" and b.label = '%label' " & _
			" and b.is_active = 1 " & _
			" and a.root_id = c.folder_id " & _ 
			" and c.root_id is null " & _
			" and substr( c.path, length( c.path ) - length( '%root_name' ), length( '%root_name' ) ) in ( '%root_name', '%root_name' || '\' ) " & _
			" order by a.label "

		qQueryPageFiles = "select a.id, a.event_id, " & _
			" xmlroot.path || xmlfolder.path || xmlbase.filename || '.' || xmlbase.type xml, " & _
			" xslroot.path || xslfolder.path || xslbase.filename || '.' || xslbase.type xsl " & _
			" from tbXML_EventPages a, tbXML_Events b, tbXML_folders c, " & _
			" tbXML_base xmlbase, tbXML_folders xmlfolder, tbXML_folders xmlroot, " & _
			" tbXML_base xslbase, tbXML_folders xslfolder, tbXML_folders xslroot " & _
			" where a.event_id = b.id " & _
			" and a.label = '%token' " & _
			" and b.label = '%event_label' " & _
			" and b.is_active = 1 " & _
			" and a.root_id = c.folder_id " & _
			" and c.root_id is null " & _
			" and substr( c.path, length( c.path ) - length( '%root_name' ), length( '%root_name' ) ) in ( '%root_name', '%root_name' || '\' ) " & _
			" and a.xml_id = xmlbase.id " & _
			" and a.xsl_id = xslbase.id " & _
			" and xmlbase.folder_id = xmlfolder.folder_id " & _
			" and xslbase.folder_id = xslfolder.folder_id " & _
			" and xmlfolder.root_id = xmlroot.folder_id " & _
			" and xslfolder.root_id = xslroot.folder_id " 

		sql_QueryShortcutXML = "select b.filename, b.type, r.path || fo.path path " & _
			"from tbXML_front f, tbXML_base b, tbXML_folders fo, tbXML_folders r " & _
			"where f.xml_id = b.id " & _
			"and b.folder_id = fo.folder_id " & _
			"and b.is_active = '1' " & _
			"and fo.root_id = r.folder_id " & _
			"and fo.is_active = '1' " & _
			"and f.language_id = '%language_id%' " & _
			"and f.shortcut = '%label%' " & _
			"and f.deleted = 0 "
			
		sql_QueryShortcutXSL = "select b.filename, b.type, r.path || fo.path path " & _
			"from tbXML_front f, tbXML_base b, tbXML_folders fo, tbXML_folders r " & _
			"where f.style_id = b.id " & _
			"and b.folder_id = fo.folder_id " & _
			"and b.is_active = '1' " & _
			"and fo.root_id = r.folder_id " & _
			"and fo.is_active = '1' " & _
			"and f.language_id = '%language_id%' " & _
			"and f.shortcut = '%label%' " & _
			"and f.deleted = 0 "
	Else
		qQueryEventList = "select b.id, b.label, c.root_id " & _
			" from tbXML_EventsList a, tbXML_Events b, tbXML_folders c " & _
			" where a.root_id = c.folder_id " & _
			" and c.root_id is null " & _
			" and Right( c.path, Len( '%root_name' ) + 1 ) in ( '%root_name', '%root_name' + '\' ) " & _
			" and a.event_id = b.id " & _
			" and a.label = '%label' " & _
			" and b.is_active = 1" & _
			" order by b.label "

		qQueryEventPages = "select a.id, a.event_id, a.label " & _
			" from tbXML_EventPages a, tbXML_Events b, tbXML_folders c " & _
			" where a.event_id = b.id " & _
			" and b.label = '%label' " & _
			" and a.root_id = c.folder_id " & _ 
			" and c.root_id is null " & _
			" and Right( c.path, Len( '%root_name' ) + 1 ) in ( '%root_name', '%root_name' + '\' ) " & _
			" order by a.label "

		qQueryPageFiles = "select a.id, a.event_id, " & _
			" xmlroot.path + xmlfolder.path + xmlbase.filename + '.' + xmlbase.type as xml, " & _
			" xslroot.path + xslfolder.path + xslbase.filename + '.' + xslbase.type as xsl " & _
			" from tbXML_EventPages a, tbXML_Events b, tbXML_folders c, " & _
			" tbXML_base xmlbase, tbXML_folders xmlfolder, tbXML_folders xmlroot, " & _
			" tbXML_base xslbase, tbXML_folders xslfolder, tbXML_folders xslroot " & _
			" where a.event_id = b.id " & _
			" and a.label = '%token' " & _
			" and b.label = '%event_label' " & _
			" and b.is_active = 1 " & _
			" and a.root_id = c.folder_id " & _
			" and c.root_id is null " & _
			" and Right( c.path, Len( '%root_name' ) + 1 ) in ( '%root_name', '%root_name' + '\' ) " & _
			" and a.xml_id = xmlbase.id " & _
			" and a.xsl_id = xslbase.id " & _
			" and xmlbase.folder_id = xmlfolder.folder_id " & _
			" and xslbase.folder_id = xslfolder.folder_id " & _
			" and xmlfolder.root_id = xmlroot.folder_id " & _
			" and xslfolder.root_id = xslroot.folder_id " 
			
		sql_QueryShortcutXML = "select b.filename, b.type, r.path + fo.path as path " & _
			"from tbXML_front f, tbXML_base b, tbXML_folders fo, tbXML_folders r " & _
			"where f.xml_id = b.id " & _
			"and b.folder_id = fo.folder_id " & _
			"and b.is_active = '1' " & _
			"and fo.root_id = r.folder_id " & _
			"and fo.is_active = '1' " & _
			"and f.language_id = '%language_id%' " & _
			"and f.shortcut = '%label%' " & _
			"and f.deleted = 0 "
			
		sql_QueryShortcutXSL = "select b.filename, b.type, r.path + fo.path as path " & _
			"from tbXML_front f, tbXML_base b, tbXML_folders fo, tbXML_folders r " & _
			"where f.style_id = b.id " & _
			"and b.folder_id = fo.folder_id " & _
			"and b.is_active = '1' " & _
			"and fo.root_id = r.folder_id " & _
			"and fo.is_active = '1' " & _
			"and f.language_id = '%language_id%' " & _
			"and f.shortcut = '%label%' " & _
			"and f.deleted = 0 "
	End If
End Sub
	
' Constructor
Sub Initialize
	' instantiates the several needed objects
	Set oXML = Server.CreateObject( "MSXML.DomDocument" )
	oXML.async = False
	oXML.validateOnParse = False
	Set oXSL = Server.CreateObject( "MSXML.DomDocument" )
	oXSL.async = False
	oXSL.validateOnParse = False

	' defaults
	sRoot = ""
	iLanguageID = -1		
	isOracle = True
	intReplace = 0
	Call DefineQueries()
End Sub
	
' Destructor
Sub Terminate
	' clean up
	Set oXML = Nothing
	Set oXSL = Nothing
End Sub

'
' -- Create Initialize and Terminate points for WSC
'
Class CPrivate
	Private Sub Class_Initialize
		Call Initialize()
	End Sub
	
	Private Sub Class_Terminate
		Call Terminate()
	End Sub
End Class
Dim ClassHandler
Set ClassHandler = new CPrivate
]]>
</script>

</component>